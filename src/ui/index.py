import streamlit as st
from PIL import Image
import io
import os
from dotenv import load_dotenv
import sys
import tempfile

# Add the src directory to the Python path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from api.app_main import detect_ai_generated_image
from api.app_main import get_detailed_analysis

# Load environment variables
load_dotenv()

# Set page config
st.set_page_config(
    page_title="AI-Generated Image Detector",
    page_icon="üîç",
    layout="wide"
)

# Custom CSS for better styling
st.markdown("""
<style>
    .stApp {
        background-color: #EEEEEE;
    }
    .main {
        padding: 2rem;
    }
    .stButton>button {
        width: 100%;
        background-color: #00ADB5;
        color: #EEEEEE;
        padding: 0.5rem;
        border-radius: 5px;
        border: none;
        font-weight: bold;
    }
    .stButton>button:hover {
        background-color: #008C93;
    }
    .clear-button>button {
        background-color: #393E46 !important;
        color: #EEEEEE !important;
    }
    .clear-button>button:hover {
        background-color: #222831 !important;
    }
    .analysis-box {
        background-color: #393E46;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
        color: #EEEEEE;
    }
    .confidence-high {
        color: #00ADB5;
        font-weight: bold;
    }
    .confidence-low {
        color: #EEEEEE;
        font-weight: bold;
    }
    .confidence-score {
        font-size: 1.2em;
        margin-top: 0.5rem;
        padding: 0.5rem;
        border-radius: 5px;
        text-align: center;
    }
    h1, h2, h3 {
        color: #222831;
    }
    .stSubheader {
        color: #222831;
    }
    .stTextArea>div>div>textarea {
        background-color: #EEEEEE;
        color: #222831;
    }
    .stInfo {
        background-color: #393E46;
        color: #EEEEEE;
    }
    .stError {
        background-color: #222831;
        color: #EEEEEE;
    }
    .stWarning {
        background-color: #393E46;
        color: #EEEEEE;
    }
    .stMarkdown {
        color: #222831;
    }
    .stFileUploader>div {
        background-color: #393E46;
        color: #EEEEEE;
        border-radius: 5px;
        padding: 1rem;
    }
    .stFileUploader>div:hover {
        background-color: #222831;
    }
    .stSpinner>div {
        background-color: #393E46;
        color: #EEEEEE;
    }
    .stImage {
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(34, 40, 49, 0.2);
    }
</style>
""", unsafe_allow_html=True)

# Initialize session state for image
if 'current_image' not in st.session_state:
    st.session_state.current_image = None
if 'analysis_shown' not in st.session_state:
    st.session_state.analysis_shown = False

# Title and description
st.title("AI-Generated Image Detector")
st.markdown("Upload an image to analyze if it was generated by AI and get detailed insights.")

# Create two columns for layout
col1, col2 = st.columns([1, 1])

with col1:
    # Image upload section
    st.subheader("Upload Image")
    
    if st.session_state.current_image is None:
        uploaded_file = st.file_uploader("", type=["jpg", "jpeg", "png"])
        if uploaded_file is not None:
            st.session_state.current_image = uploaded_file
            st.rerun()
    else:
        try:
            # Create a temporary file to store the uploaded image
            with tempfile.NamedTemporaryFile(delete=False, suffix=os.path.splitext(st.session_state.current_image.name)[1]) as tmp_file:
                tmp_file.write(st.session_state.current_image.getvalue())
                tmp_file_path = tmp_file.name
            
            # Create two columns for buttons
            button_col1, button_col2 = st.columns(2)
            
            # Clear button
            with button_col2:
                #st.markdown('<div class="clear-button">', unsafe_allow_html=True)
                if st.button("Clear"):
                    st.session_state.current_image = None
                    if 'analysis_done' in st.session_state:
                        del st.session_state['analysis_done']
                    st.rerun()
                #st.markdown('</div>', unsafe_allow_html=True)
            
            # Display the uploaded image
            image = Image.open(st.session_state.current_image)
            st.image(image, use_container_width=True)
            
            # Analysis button
            with button_col1:
                if st.button("Analyze Image"):
                    with st.spinner("Analyzing image for AI generation indicators..."):
                        try:
                            # Convert image to bytes
                            img_byte_arr = io.BytesIO()
                            image = Image.open(st.session_state.current_image)
                            image.save(img_byte_arr, format=image.format)
                            img_byte_arr = img_byte_arr.getvalue()
                            
                            # Get analysis results
                            result = detect_ai_generated_image(img_byte_arr, tmp_file_path)
                            
                            if "error" in result:
                                st.error(f"Analysis failed: {result['error']}")
                            else:
                                # Prepare summary
                                confidence_score = result["confidence_score"]
                                is_ai_generated = result["is_ai_generated"]
                                
                                # Determine confidence level class
                                if confidence_score >= 0.7:
                                    confidence_class = "confidence-high"
                                elif confidence_score >= 0.3:
                                    confidence_class = "confidence-low"
                                else:
                                    confidence_class = "confidence-high"

                                confidence_percentage = (confidence_score - 0.5) * 200

                                summary = f"""
                                <div class="{confidence_class}">
                                This image appears to be {'AI-generated' if is_ai_generated == True else 'Human-created' if is_ai_generated == False else 'inconclusive to determine if AI-generated or human-created'}.
                                 Confidence of {str(round(abs(confidence_percentage),2))}% </div>
                                """
                                # Store in session state
                                st.session_state['analysis_done'] = True
                                st.session_state['summary'] = summary
                                #st.session_state['detailed_analysis'] = detailed_analysis
                                st.session_state['confidence_score'] = confidence_score
                                st.session_state['confidence_class'] = confidence_class
                                st.session_state['image_bytes'] = img_byte_arr
                                st.session_state['is_ai_generated'] = is_ai_generated
                                
                        except Exception as e:
                            st.error(f"Error during analysis: {str(e)}")
                        finally:
                            # Clean up the temporary file
                            try:
                                os.unlink(tmp_file_path)
                            except Exception as e:
                                st.warning(f"Could not delete temporary file: {str(e)}")
            
        except Exception as e:
            st.error(f"Error processing image: {str(e)}")
            # Clean up the temporary file in case of error
            try:
                os.unlink(tmp_file_path)
            except:
                pass

with col2:
    # Results section  
    
    if 'analysis_done' in st.session_state and st.session_state['analysis_done']:
        st.subheader("Analysis Results")
        # Summary section
        st.markdown("#### Summary")
        summary = st.session_state['summary']
        confidence_class = st.session_state['confidence_class']
        st.markdown(f'<div class="analysis-box"><div class="confidence-score {confidence_class}">{summary}</div></div>', unsafe_allow_html=True)       
        
        # Confidence Score section
        st.markdown("#### Analysis Score")        
        confidence_score = st.session_state['confidence_score']        
        st.markdown(f'<div class="analysis-box"><div class="confidence-score {confidence_class}">{confidence_score}</div></div>', unsafe_allow_html=True)
        
        is_ai_generated = st.session_state['is_ai_generated']
        if is_ai_generated is not None:

            if 'button_disabled' not in st.session_state:
                st.session_state.button_disabled = False

            def disable_button():
                st.session_state.button_disabled = True
                

            if st.button('Show Detailed Analysis', disabled=st.session_state.button_disabled, on_click=disable_button):
                with st.spinner("processing..."):                    
                    try:
                        # Call app_main function to get detailed analysis if image bytes exist
                        if 'image_bytes' in st.session_state and st.session_state['image_bytes']:
                            detailed_analysis = get_detailed_analysis(st.session_state['image_bytes'], "input_image_path", is_ai_generated)
                    except Exception as e:
                        st.error(f"Error getting detailed analysis: {str(e)}")                                       
                        
                    if detailed_analysis:
                        st.markdown("#### Detailed Analysis")   
                       # Format the detailed analysis text with proper styling
                        formatted_analysis = detailed_analysis.replace('\n', '<br>')
                        st.markdown(f'''
                            <div class="analysis-box">
                                <div style="color: #EEEEEE; line-height: 1.6;">
                                    {formatted_analysis}
                                </div>
                            </div>
                        ''', unsafe_allow_html=True)                           
                    else:
                        st.markdown("#### Error in Detailed Analysis")
                        st.markdown(f'<div class="analysis-box"><div class="confidence-score {confidence_class}">Unknown error. Try freshing the page or try later.</div></div>', unsafe_allow_html=True)
